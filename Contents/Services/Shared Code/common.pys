# -*- coding: utf-8 -*-

# Copyright (c) 2014, KOL
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTLICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


PREFIX = '/music/mixcloud'

MC_API = 'http://api.mixcloud.com'
MC_LIMIT = 50

ICON = 'icon-default.png'
TITLE = 'Title'


def GetCategory(url):
    info = ApiRequest(uri)
    if (info and info['channel']['videos']
            and info['channel']['videos'][0]['track_name']):
        return info['channel']

    return None


def GetShowInfo(url):
    if url[:1] != '/':
        url = url[url.find('/', 8):]  # Cut domain

    return ApiRequest(url)


def GetArtBySlug(slug):
    return 'http://mixcloud.com/media/images/www/discover/headers/'+slug+'-3.jpg'


def GetStreamInfo(url):

    try:
        data = HTML.ElementFromURL(
            url,
            headers={
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:57.0) Gecko/20100101 Firefox/57.0'
            }
        ).xpath(
            '//script[@type="text/x-mixcloud"]'
        )[0].text_content()
        data = JSON.ObjectFromString(String.DecodeHTMLEntities(data))
    except:
        return None

    for item in data:
        try:
            info = item['cloudcast']['data']['cloudcastLookup']['streamInfo']
            ret = {}
            for key in ['hlsUrl', 'url', 'dashUrl']:
                if key in info and info[key]:
                    ret[key] = Decode(info[key])

            Log.Debug(ret)
            return ret
        except:
            continue

    return None


def Decode(encoded):
    encoded = list(String.Base64Decode(encoded))
    key = 'IFYOUWANTTHEARTISTSTOGETPAIDDONOTDOWNLOADFROMMIXCLOUD'
    i = 0
    kl = len(key)
    res = ''

    for ik in encoded:
        res = res + chr(ord(ik) ^ ord(key[i % kl]))
        i = i+1

    return res


def ApiRequest(uri, params=None):

    if uri[:1] == '/':
        uri = MC_API+uri

    if not params is None:
        uri = uri+'?'+params

    try:
        ret = JSON.ObjectFromURL(uri)
        if 'error' in ret:
            Log.Error(ret['error']['message'])
            return None

        return ret
    except:
        return None


def GetTrackObject(item):

    url = MetaUrl(item['url'])
    url.update(item)

    return URLService.MetadataObjectForURL(url)


def InitMetaUrl(url):

    try:
        # has attribute crutch
        if url.item:
            return url
    except:
        url = MetaUrl(url)
        info = GetShowInfo(url)
        if info:
            url.update(info)
            return url

    raise Ex.MediaNotAvailable


class MetaUrl(str):
    item = None
    episode = None

    def update(self, item):
        self.item = item
        return self
